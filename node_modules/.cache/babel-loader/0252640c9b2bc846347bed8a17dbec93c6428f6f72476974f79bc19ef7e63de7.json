{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import\"./Chatbot.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Chatbot=()=>{const[isOpen,setIsOpen]=useState(false);const[messages,setMessages]=useState([]);const[inputValue,setInputValue]=useState(\"\");const messagesEndRef=useRef(null);// Scroll to bottom whenever messages update\nuseEffect(()=>{if(messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:\"smooth\"});}},[messages]);const toggleChatbot=()=>{setIsOpen(prev=>!prev);};const handleInputChange=e=>setInputValue(e.target.value);const appendMessage=(sender,text)=>{setMessages(prev=>[...prev,{sender,text}]);};const getBotResponse=async message=>{const apiKey=\"AIzaSyCW0tn_yibVIvbV1TgyXosN7IFXejMYodY\";const apiUrl=\"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=\".concat(apiKey);try{var _data$candidates,_data$candidates$,_data$candidates$$con,_data$candidates$$con2,_data$candidates$$con3;const response=await fetch(apiUrl,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({contents:[{role:\"user\",parts:[{text:message}]}],systemInstruction:{role:\"system\",parts:[{text:\"You are a helpful travel assistant. Only answer travel-related questions (destinations, flights, hotels,Tripnest, tips, etc.). If the user asks anything unrelated to travel, politely reply: '‚ö†Ô∏è Sorry, I can only help with travel-related questions.'\"}]}})});if(!response.ok)throw new Error(\"HTTP error! status: \".concat(response.status));const data=await response.json();return((_data$candidates=data.candidates)===null||_data$candidates===void 0?void 0:(_data$candidates$=_data$candidates[0])===null||_data$candidates$===void 0?void 0:(_data$candidates$$con=_data$candidates$.content)===null||_data$candidates$$con===void 0?void 0:(_data$candidates$$con2=_data$candidates$$con.parts)===null||_data$candidates$$con2===void 0?void 0:(_data$candidates$$con3=_data$candidates$$con2[0])===null||_data$candidates$$con3===void 0?void 0:_data$candidates$$con3.text)||\"‚ö†Ô∏è No response from Gemini\";}catch(error){console.error(\"Error fetching bot response:\",error);return\"‚ö†Ô∏è Error: \"+error.message;}};const handleSendMessage=async()=>{const userMessage=inputValue.trim();if(!userMessage)return;appendMessage(\"user\",userMessage);setInputValue(\"\");const botReply=await getBotResponse(userMessage);appendMessage(\"bot\",botReply);};const handleKeyPress=e=>{if(e.key===\"Enter\")handleSendMessage();};return/*#__PURE__*/_jsxs(_Fragment,{children:[!isOpen&&/*#__PURE__*/_jsx(\"div\",{id:\"chatbot-icon\",onClick:toggleChatbot,style:{position:\"fixed\",bottom:\"20px\",right:\"20px\",zIndex:9999},children:\"\\uD83D\\uDCAC\"}),isOpen&&/*#__PURE__*/_jsxs(\"div\",{id:\"chatbot-container\",style:{position:\"fixed\",bottom:\"80px\",right:\"20px\",zIndex:9999},children:[/*#__PURE__*/_jsxs(\"div\",{id:\"chatbot-header\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Your Travel Assistant\\u2708\\uFE0F\"}),/*#__PURE__*/_jsx(\"button\",{id:\"close-btn\",onClick:toggleChatbot,children:\"\\xD7\"})]}),/*#__PURE__*/_jsx(\"div\",{id:\"chatbot-body\",children:/*#__PURE__*/_jsxs(\"div\",{id:\"chatbot-messages\",children:[messages.map((m,i)=>/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(m.sender),children:m.text},i)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]})}),/*#__PURE__*/_jsxs(\"div\",{id:\"chatbot-input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"chatbot-input\",placeholder:\"Ask Tripnest Anything...\",value:inputValue,onChange:handleInputChange,onKeyPress:handleKeyPress}),/*#__PURE__*/_jsx(\"button\",{id:\"send-btn\",onClick:handleSendMessage,children:\"Send\"})]})]})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","useRef","useEffect","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Chatbot","isOpen","setIsOpen","messages","setMessages","inputValue","setInputValue","messagesEndRef","current","scrollIntoView","behavior","toggleChatbot","prev","handleInputChange","e","target","value","appendMessage","sender","text","getBotResponse","message","apiKey","apiUrl","concat","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","JSON","stringify","contents","role","parts","systemInstruction","ok","Error","status","data","json","candidates","content","error","console","handleSendMessage","userMessage","trim","botReply","handleKeyPress","key","children","id","onClick","style","position","bottom","right","zIndex","map","m","i","className","ref","type","placeholder","onChange","onKeyPress"],"sources":["D:/projects/tipnest/tripnest-react/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll to bottom whenever messages update\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n\r\n  const toggleChatbot = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const appendMessage = (sender, text) => {\r\n    setMessages((prev) => [...prev, { sender, text }]);\r\n  };\r\n\r\n  const getBotResponse = async (message) => {\r\n    const apiKey = \"AIzaSyCW0tn_yibVIvbV1TgyXosN7IFXejMYodY\";  \r\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(apiUrl, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          contents: [\r\n            { role: \"user\", parts: [{ text: message }] }\r\n          ],\r\n          systemInstruction: {\r\n            role: \"system\",\r\n            parts: [\r\n              {\r\n                text: \"You are a helpful travel assistant. Only answer travel-related questions (destinations, flights, hotels,Tripnest, tips, etc.). If the user asks anything unrelated to travel, politely reply: '‚ö†Ô∏è Sorry, I can only help with travel-related questions.'\"\r\n              }\r\n            ]\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n\r\n      const data = await response.json();\r\n      return data.candidates?.[0]?.content?.parts?.[0]?.text || \"‚ö†Ô∏è No response from Gemini\";\r\n    } catch (error) {\r\n      console.error(\"Error fetching bot response:\", error);\r\n      return \"‚ö†Ô∏è Error: \" + error.message;\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    const userMessage = inputValue.trim();\r\n    if (!userMessage) return;\r\n\r\n    appendMessage(\"user\", userMessage);\r\n    setInputValue(\"\");\r\n\r\n    const botReply = await getBotResponse(userMessage);\r\n    appendMessage(\"bot\", botReply);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") handleSendMessage();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Floating Chat Icon */}\r\n      {!isOpen && (\r\n        <div\r\n          id=\"chatbot-icon\"\r\n          onClick={toggleChatbot}\r\n          style={{ position: \"fixed\", bottom: \"20px\", right: \"20px\", zIndex: 9999 }}\r\n        >\r\n          üí¨\r\n        </div>\r\n      )}\r\n\r\n      {/* Chatbot Container */}\r\n      {isOpen && (\r\n        <div\r\n          id=\"chatbot-container\"\r\n          style={{ position: \"fixed\", bottom: \"80px\", right: \"20px\", zIndex: 9999 }}\r\n        >\r\n          <div id=\"chatbot-header\">\r\n            <span>Your Travel Assistant‚úàÔ∏è</span>\r\n            <button id=\"close-btn\" onClick={toggleChatbot}>\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div id=\"chatbot-body\">\r\n            <div id=\"chatbot-messages\">\r\n              {messages.map((m, i) => (\r\n                <div key={i} className={`message ${m.sender}`}>\r\n                  {m.text}\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef}></div>\r\n            </div>\r\n          </div>\r\n          <div id=\"chatbot-input-container\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"chatbot-input\"\r\n              placeholder=\"Ask Tripnest Anything...\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n            <button id=\"send-btn\" onClick={handleSendMessage}>\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}