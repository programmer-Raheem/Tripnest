{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\tipnest\\\\tripnest-react\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./Chatbot.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom whenever messages update\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages]);\n  const toggleChatbot = () => {\n    setIsOpen(prev => !prev);\n  };\n  const handleInputChange = e => setInputValue(e.target.value);\n  const appendMessage = (sender, text) => {\n    setMessages(prev => [...prev, {\n      sender,\n      text\n    }]);\n  };\n  const getBotResponse = async message => {\n    const apiKey = \"AIzaSyCW0tn_yibVIvbV1TgyXosN7IFXejMYodY\";\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      const response = await fetch(apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            role: \"user\",\n            parts: [{\n              text: message\n            }]\n          }],\n          systemInstruction: {\n            role: \"system\",\n            parts: [{\n              text: \"You are a helpful travel assistant. Only answer travel-related questions (destinations, flights, hotels, tips, etc.). If the user asks anything unrelated to travel, politely reply: '⚠️ Sorry, I can only help with travel-related questions.'\"\n            }]\n          }\n        })\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data = await response.json();\n      return ((_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"⚠️ No response from Gemini\";\n    } catch (error) {\n      console.error(\"Error fetching bot response:\", error);\n      return \"⚠️ Error: \" + error.message;\n    }\n  };\n  const handleSendMessage = async () => {\n    const userMessage = inputValue.trim();\n    if (!userMessage) return;\n    appendMessage(\"user\", userMessage);\n    setInputValue(\"\");\n    const botReply = await getBotResponse(userMessage);\n    appendMessage(\"bot\", botReply);\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") handleSendMessage();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chatbot-icon\",\n      onClick: toggleChatbot,\n      style: {\n        position: \"fixed\",\n        bottom: \"20px\",\n        right: \"20px\",\n        zIndex: 9999\n      },\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chatbot-container\",\n      style: {\n        position: \"fixed\",\n        bottom: \"80px\",\n        right: \"20px\",\n        zIndex: 9999\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Raheem chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"close-btn\",\n          onClick: toggleChatbot,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbot-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chatbot-messages\",\n          children: [messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${m.sender}`,\n            children: m.text\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbot-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chatbot-input\",\n          placeholder: \"Ask Tripnest Anything...\",\n          value: inputValue,\n          onChange: handleInputChange,\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"send-btn\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"lRTpNo5Gptdj1Kqqa7sC/+8GCpI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","inputValue","setInputValue","messagesEndRef","current","scrollIntoView","behavior","toggleChatbot","prev","handleInputChange","e","target","value","appendMessage","sender","text","getBotResponse","message","apiKey","apiUrl","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","JSON","stringify","contents","role","parts","systemInstruction","ok","Error","status","data","json","candidates","content","error","console","handleSendMessage","userMessage","trim","botReply","handleKeyPress","key","children","id","onClick","style","position","bottom","right","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","map","m","i","className","ref","type","placeholder","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["D:/projects/tipnest/tripnest-react/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./Chatbot.module.css\";\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll to bottom whenever messages update\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n\r\n  const toggleChatbot = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const appendMessage = (sender, text) => {\r\n    setMessages((prev) => [...prev, { sender, text }]);\r\n  };\r\n\r\n  const getBotResponse = async (message) => {\r\n    const apiKey = \"AIzaSyCW0tn_yibVIvbV1TgyXosN7IFXejMYodY\";  \r\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(apiUrl, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          contents: [\r\n            { role: \"user\", parts: [{ text: message }] }\r\n          ],\r\n          systemInstruction: {\r\n            role: \"system\",\r\n            parts: [\r\n              {\r\n                text: \"You are a helpful travel assistant. Only answer travel-related questions (destinations, flights, hotels, tips, etc.). If the user asks anything unrelated to travel, politely reply: '⚠️ Sorry, I can only help with travel-related questions.'\"\r\n              }\r\n            ]\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n\r\n      const data = await response.json();\r\n      return data.candidates?.[0]?.content?.parts?.[0]?.text || \"⚠️ No response from Gemini\";\r\n    } catch (error) {\r\n      console.error(\"Error fetching bot response:\", error);\r\n      return \"⚠️ Error: \" + error.message;\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    const userMessage = inputValue.trim();\r\n    if (!userMessage) return;\r\n\r\n    appendMessage(\"user\", userMessage);\r\n    setInputValue(\"\");\r\n\r\n    const botReply = await getBotResponse(userMessage);\r\n    appendMessage(\"bot\", botReply);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") handleSendMessage();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Floating Chat Icon */}\r\n      {!isOpen && (\r\n        <div\r\n          id=\"chatbot-icon\"\r\n          onClick={toggleChatbot}\r\n          style={{ position: \"fixed\", bottom: \"20px\", right: \"20px\", zIndex: 9999 }}\r\n        >\r\n          💬\r\n        </div>\r\n      )}\r\n\r\n      {/* Chatbot Container */}\r\n      {isOpen && (\r\n        <div\r\n          id=\"chatbot-container\"\r\n          style={{ position: \"fixed\", bottom: \"80px\", right: \"20px\", zIndex: 9999 }}\r\n        >\r\n          <div id=\"chatbot-header\">\r\n            <span>Raheem chatbot</span>\r\n            <button id=\"close-btn\" onClick={toggleChatbot}>\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div id=\"chatbot-body\">\r\n            <div id=\"chatbot-messages\">\r\n              {messages.map((m, i) => (\r\n                <div key={i} className={`message ${m.sender}`}>\r\n                  {m.text}\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef}></div>\r\n            </div>\r\n          </div>\r\n          <div id=\"chatbot-input-container\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"chatbot-input\"\r\n              placeholder=\"Ask Tripnest Anything...\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n            <button id=\"send-btn\" onClick={handleSendMessage}>\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMe,cAAc,GAAGd,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACAC,SAAS,CAAC,MAAM;IACd,IAAIa,cAAc,CAACC,OAAO,EAAE;MAC1BD,cAAc,CAACC,OAAO,CAACC,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IAC/D;EACF,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,MAAMQ,aAAa,GAAGA,CAAA,KAAM;IAC1BT,SAAS,CAAEU,IAAI,IAAK,CAACA,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMC,iBAAiB,GAAIC,CAAC,IAAKR,aAAa,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAE9D,MAAMC,aAAa,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;IACtCf,WAAW,CAAEQ,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAEM,MAAM;MAAEC;IAAK,CAAC,CAAC,CAAC;EACpD,CAAC;EAED,MAAMC,cAAc,GAAG,MAAOC,OAAO,IAAK;IACxC,MAAMC,MAAM,GAAG,yCAAyC;IACxD,MAAMC,MAAM,GAAG,uGAAuGD,MAAM,EAAE;IAE9H,IAAI;MAAA,IAAAE,gBAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,MAAM,EAAE;QACnCQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAE,CACR;YAAEC,IAAI,EAAE,MAAM;YAAEC,KAAK,EAAE,CAAC;cAAEnB,IAAI,EAAEE;YAAQ,CAAC;UAAE,CAAC,CAC7C;UACDkB,iBAAiB,EAAE;YACjBF,IAAI,EAAE,QAAQ;YACdC,KAAK,EAAE,CACL;cACEnB,IAAI,EAAE;YACR,CAAC;UAEL;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACU,QAAQ,CAACW,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBZ,QAAQ,CAACa,MAAM,EAAE,CAAC;MAE3E,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;MAClC,OAAO,EAAApB,gBAAA,GAAAmB,IAAI,CAACE,UAAU,cAAArB,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,wBAAAC,qBAAA,GAApBD,iBAAA,CAAsBqB,OAAO,cAAApB,qBAAA,wBAAAC,sBAAA,GAA7BD,qBAAA,CAA+BY,KAAK,cAAAX,sBAAA,wBAAAC,sBAAA,GAApCD,sBAAA,CAAuC,CAAC,CAAC,cAAAC,sBAAA,uBAAzCA,sBAAA,CAA2CT,IAAI,KAAI,4BAA4B;IACxF,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,YAAY,GAAGA,KAAK,CAAC1B,OAAO;IACrC;EACF,CAAC;EAED,MAAM4B,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,WAAW,GAAG7C,UAAU,CAAC8C,IAAI,CAAC,CAAC;IACrC,IAAI,CAACD,WAAW,EAAE;IAElBjC,aAAa,CAAC,MAAM,EAAEiC,WAAW,CAAC;IAClC5C,aAAa,CAAC,EAAE,CAAC;IAEjB,MAAM8C,QAAQ,GAAG,MAAMhC,cAAc,CAAC8B,WAAW,CAAC;IAClDjC,aAAa,CAAC,KAAK,EAAEmC,QAAQ,CAAC;EAChC,CAAC;EAED,MAAMC,cAAc,GAAIvC,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACwC,GAAG,KAAK,OAAO,EAAEL,iBAAiB,CAAC,CAAC;EAC5C,CAAC;EAED,oBACErD,OAAA,CAAAE,SAAA;IAAAyD,QAAA,GAEG,CAACtD,MAAM,iBACNL,OAAA;MACE4D,EAAE,EAAC,cAAc;MACjBC,OAAO,EAAE9C,aAAc;MACvB+C,KAAK,EAAE;QAAEC,QAAQ,EAAE,OAAO;QAAEC,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAK,CAAE;MAAAP,QAAA,EAC3E;IAED;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN,EAGAjE,MAAM,iBACLL,OAAA;MACE4D,EAAE,EAAC,mBAAmB;MACtBE,KAAK,EAAE;QAAEC,QAAQ,EAAE,OAAO;QAAEC,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAK,CAAE;MAAAP,QAAA,gBAE1E3D,OAAA;QAAK4D,EAAE,EAAC,gBAAgB;QAAAD,QAAA,gBACtB3D,OAAA;UAAA2D,QAAA,EAAM;QAAc;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3BtE,OAAA;UAAQ4D,EAAE,EAAC,WAAW;UAACC,OAAO,EAAE9C,aAAc;UAAA4C,QAAA,EAAC;QAE/C;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACNtE,OAAA;QAAK4D,EAAE,EAAC,cAAc;QAAAD,QAAA,eACpB3D,OAAA;UAAK4D,EAAE,EAAC,kBAAkB;UAAAD,QAAA,GACvBpD,QAAQ,CAACgE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBACjBzE,OAAA;YAAa0E,SAAS,EAAE,WAAWF,CAAC,CAAClD,MAAM,EAAG;YAAAqC,QAAA,EAC3Ca,CAAC,CAACjD;UAAI,GADCkD,CAAC;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEN,CACN,CAAC,eACFtE,OAAA;YAAK2E,GAAG,EAAEhE;UAAe;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNtE,OAAA;QAAK4D,EAAE,EAAC,yBAAyB;QAAAD,QAAA,gBAC/B3D,OAAA;UACE4E,IAAI,EAAC,MAAM;UACXhB,EAAE,EAAC,eAAe;UAClBiB,WAAW,EAAC,0BAA0B;UACtCzD,KAAK,EAAEX,UAAW;UAClBqE,QAAQ,EAAE7D,iBAAkB;UAC5B8D,UAAU,EAAEtB;QAAe;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eACFtE,OAAA;UAAQ4D,EAAE,EAAC,UAAU;UAACC,OAAO,EAAER,iBAAkB;UAAAM,QAAA,EAAC;QAElD;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA,eACD,CAAC;AAEP,CAAC;AAAClE,EAAA,CA3HID,OAAO;AAAA6E,EAAA,GAAP7E,OAAO;AA6Hb,eAAeA,OAAO;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}