{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\tipnest\\\\tripnest-react\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './Chatbot.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (!inputValue.trim()) return;\n\n    // Add user message to chat\n    const userMessage = {\n      sender: 'user',\n      text: inputValue\n    };\n    setMessages([...messages, userMessage]);\n    setInputValue('');\n\n    // Simulate bot response (replace with actual API call)\n    setTimeout(() => {\n      const botMessage = {\n        sender: 'bot',\n        text: 'Thanks for your message! This is a demo response.'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    }, 1000);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chatbot-icon\",\n      className: styles.chatbotIcon,\n      onClick: toggleChatbot,\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chatbot-container\",\n      className: `${styles.chatbotContainer} ${isOpen ? '' : styles.hidden}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbot-header\",\n        className: styles.chatbotHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"TripNest Travel Assistant \\u2708\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"close-btn\",\n          className: styles.closeBtn,\n          onClick: toggleChatbot,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbot-body\",\n        className: styles.chatbotBody,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chatbot-messages\",\n          className: styles.chatbotMessages,\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles.message} ${styles[message.sender]}`,\n            children: message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbot-input-container\",\n        className: styles.chatbotInputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chatbot-input\",\n          className: styles.chatbotInput,\n          placeholder: \"Ask me about travel...\",\n          value: inputValue,\n          onChange: handleInputChange,\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"send-btn\",\n          className: styles.sendBtn,\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"8OOSHMa2P/UokQhJkDaHcH74ytM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","inputValue","setInputValue","toggleChatbot","handleInputChange","e","target","value","handleSendMessage","trim","userMessage","sender","text","setTimeout","botMessage","prevMessages","handleKeyPress","key","children","id","className","chatbotIcon","onClick","fileName","_jsxFileName","lineNumber","columnNumber","chatbotContainer","hidden","chatbotHeader","closeBtn","chatbotBody","chatbotMessages","map","message","index","chatbotInputContainer","type","chatbotInput","placeholder","onChange","onKeyPress","sendBtn","_c","$RefreshReg$"],"sources":["D:/projects/tipnest/tripnest-react/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './Chatbot.module.css';\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const toggleChatbot = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputValue.trim()) return;\r\n\r\n    // Add user message to chat\r\n    const userMessage = { sender: 'user', text: inputValue };\r\n    setMessages([...messages, userMessage]);\r\n    setInputValue('');\r\n\r\n    // Simulate bot response (replace with actual API call)\r\n    setTimeout(() => {\r\n      const botMessage = { sender: 'bot', text: 'Thanks for your message! This is a demo response.' };\r\n      setMessages(prevMessages => [...prevMessages, botMessage]);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"chatbot-icon\" className={styles.chatbotIcon} onClick={toggleChatbot}>\r\n        üí¨\r\n      </div>\r\n\r\n      <div id=\"chatbot-container\" className={`${styles.chatbotContainer} ${isOpen ? '' : styles.hidden}`}>\r\n        <div id=\"chatbot-header\" className={styles.chatbotHeader}>\r\n          <span>TripNest Travel Assistant ‚úàÔ∏è</span>\r\n          <button id=\"close-btn\" className={styles.closeBtn} onClick={toggleChatbot}>\r\n            &times;\r\n          </button>\r\n        </div>\r\n        <div id=\"chatbot-body\" className={styles.chatbotBody}>\r\n          <div id=\"chatbot-messages\" className={styles.chatbotMessages}>\r\n            {messages.map((message, index) => (\r\n              <div key={index} className={`${styles.message} ${styles[message.sender]}`}>\r\n                {message.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div id=\"chatbot-input-container\" className={styles.chatbotInputContainer}>\r\n          <input\r\n            type=\"text\"\r\n            id=\"chatbot-input\"\r\n            className={styles.chatbotInput}\r\n            placeholder=\"Ask me about travel...\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n          <button id=\"send-btn\" className={styles.sendBtn} onClick={handleSendMessage}>\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}